= Version comparisons in MSBuild conditions

== Relational Operators

[subs=-replacements]
In MSBuild conditions, relational operators (`<`, `>`, `<=`, `>=`) can be used to compare not only numeric values, but also versions, e.g.

[source,xml]
----
<Target Name="MyTarget">
  <Message Text="This message will only be shown on MSBuild 16.7 or later" Condition="$(MSBuildVersion) >= 16.7" />
</Target>
----

== Property Functions

MSBuild 16.5 adds link:https://github.com/dotnet/msbuild/pull/4911[property functions for version comparisons]:


- `$([MSBuild]::VersionEquals(a, b))`
- `$([MSBuild]::VersionNotEquals(a, b))`
- `$([MSBuild]::VersionLessThan(a, b))`
- `$([MSBuild]::VersionLessThanOrEquals(a, b))`
- `$([MSBuild]::VersionLessThan(a, b))`
- `$([MSBuild]::VersionGreaterThanOrEquals(a, b))`


[quote,dotnet/msbuild#4911]
____
Versions are parsed like System.Version, with the following exceptions:

- Leading v or V is ignored. Allows comparison to $(TargetFrameworkVersion)
- Everything from first '-' or '+' to end of string is ignored. Allows passing in semantic versions, though the order is not the same as semver. Instead, prerelease specified and build metadata do not have any sorting weight. This can be useful, for example, to turn on a feature for >= x.y and have it kick in on x.y.z-pre.
- Unspecified parts are same as zero value parts. (x == x.0 == x.0.0 == x.0.0.0)
- Whitespace is not allowed in integer components
- major version only is valid ("3" is equal to "3.0.0.0")
- `+` is not allowed as positive sign in integer components (it is treated as semver metadata and ignored per above)
____

== See Also

- link:https://twitter.com/dotMorten/status/1317180302523994112[Twitter Thread]
- link:https://github.com/dotnet/msbuild/pull/4911[Add intrinsic property function to compare versions (dotnet/msbuild#4911)]
