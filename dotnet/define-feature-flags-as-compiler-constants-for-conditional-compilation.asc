= Define Feature Flags as compiler constants for conditional compilation
:revdate: 2020-12-11
:link-msbuild-tips-and-tricks: link:https://www.youtube.com/watch?v=ew5Yo2utdtk&t=3557s[Tips & Tricks to improve your .NET Build Setup with MSBuild (YouTube)]
:link-rider-msbuild-webinar-2020: link:https://github.com/dasMulli/rider-msbuild-webinar-2020/blob/main/09_TfmBasedPreprocessing/Directory.Build.targets[rider-msbuild-webinar-2020 (GitHub)]

When using conditional compilation, e.g. for features that require a certain target framework, do not use the target framework constants in the `#ifdefs`.
Instead, define constants for the requried features and use these as compiler constants.
During the build, dynamically define the constants when building for a target framework where that feature is available.

Seen in {link-msbuild-tips-and-tricks}, Sample code can be found at {link-rider-msbuild-webinar-2020}

[source,xml]
----
<Project>
  <ItemGroup>
    <!-- Define feature flags with minimum target frameworks -->
    <FeatureFlag Include="SUPPORTS_GENERIC_HOST" MinimumTargetFrameworks="netcoreapp2.2;netstandard2.1" />
    ...
  </ItemGroup>

  <!--
    Based in the current target framework, define feature flag constants
  -->
  <!--
    Use BeforeCompile here (instead of e.g. CoreCompile) so that the consants
    are picked up by _GenerateCompileDependencyCache and and incremental compilation
    picks up changes to the FeatureFlag items.
  -->
  <Target Name="CreateFeatureFlagCompilerConstants" BeforeTargets="BeforeCompile">
    <ItemGroup>
      <_FeatureFlagsByMinimumTargetFramework Include="%(FeatureFlag.MinimumTargetFrameworks)"
                                             FeatureFlag="@(FeatureFlag)" />
      <_FeatureFlagsByMinimumTargetFramework Compatible="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)','%(Identity)'))" />
      <_CompatibleFeatureFlags Include="@(_FeatureFlagsByMinimumTargetFramework->WithMetadataValue('Compatible','True')->'%(FeatureFlag)'->Distinct())" />
    </ItemGroup>
    <PropertyGroup>
      <DefineConstants>$(DefineConstants);@(_CompatibleFeatureFlags)</DefineConstants>
    </PropertyGroup>
  </Target>
</Project>

----

Then, in the code, use the feature flag for conditional compilation:

[source,cs]
----
#if SUPPORTS_GENERIC_HOST
    // Use generic host
#else
    // Use something different
#endif
----

== See Also

* {link-msbuild-tips-and-tricks}
* {link-rider-msbuild-webinar-2020}
* link:../dotnet/csharp-predefined-constants.asc[C# Predefined Constants]